#! /bin/bash

# This script emulates the behaviour of the correctness check preformed by the
# Backend, but without containers. It expects the location of the challange dir
# as first and the participant dir as second parameter.

# For later this schould be generated by a challange description. So the
# challanger might use this for testin purpose

if [[ -z $1 && -z $2 ]]; then
    echo "Usage: '$0 challange-dir participant-dir'"
    exit -1
fi

if [[ -f ./target ]]; then
    echo "'target' exists remove first"
    exit -1
fi

cp -r $1 target
cp -r $2/* target

cd target;

# build challange
make;

# perform build check
make build-participant

if [[ $? -eq 0 ]]; then
    echo "participant succeded with build"
else
    echo "participant failed with build"
    cd ..
    exit -1
fi

# performe correctness check
FIFO_1="fifo1"
FIFO_2="fifo2"

mkfifo ${FIFO_1}
mkfifo ${FIFO_2}

# Attention possible timing issue here:
(sleep 1; make correctness-participant "INPUT=${FIFO_2}" "OUTPUT= ${FIFO_1}")&
make correctness-challange "INPUT=${FIFO_1}" "OUTPUT= ${FIFO_2}" #&


if [[ $? -eq 0 ]]; then
    echo "participant succeded with correctness check"
else
    echo "participant failed with correctness check"
    cd ..
    exit -1
fi

cd ..
exit
